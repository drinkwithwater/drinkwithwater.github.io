var res = {
    HelloWorld_png : "HelloWorld.png",
    CloseSelected_png : "CloseSelected.png",
    CloseNormal_png : "CloseNormal.png",
    testpng : "CloseNormal.png",
    bannerpng : "cocos2dbanner.png",
};
var spriteRes={
    berserker:"image/berserker.png",
    archer:"image/archer.png",
    flier:"image/flier.png",
    hitter:"image/hitter.png",

    one:"image/assassin.png",
    two:"image/walker.png",

    transfer:"image/transfer.png",

    box:"image/box.png",
    trigger:"image/trigger.png",
    observer:"image/observer.png",
    wall:"image/wall.png",
    rider:"image/rider.png",

    attacker:"image/assassin.png",
    defenser:"image/observer.png",
    slowGun:"image/observer.png",

    bullet:"image/box.png",
}
var itemRes={
    hp:"item/hp.png",
    maxHp:"item/maxhp.png",
    blackShell:"item/blackshell.png",
    redShell:"item/redshell.png",
    blueShell:"item/blueshell.png",
    blackSword:"item/blacksword.png",
    greenSword:"item/greensword.png",
}

var g_resources = [];
for (var i in res) {
    g_resources.push(res[i]);
}
for (var i in spriteRes) {
    g_resources.push(spriteRes[i]);
}
for (var i in itemRes) {
    g_resources.push(itemRes[i]);
}

var HelloWorldLayer = cc.Layer.extend({
    sprite:null,
    ctor:function () {
        //////////////////////////////
        // 1. super init first
        this._super();

        /////////////////////////////
        // 2. add a menu item with "X" image, which is clicked to quit the program
        //    you may modify it.
        // ask the window size
        var size = cc.winSize;

        // add a "close" icon to exit the progress. it's an autorelease object
        var closeItem = new cc.MenuItemImage(
            res.CloseNormal_png,
            res.CloseSelected_png,
            function () {
                cc.log("Menu is clicked!");
            }, this);
        closeItem.attr({
            x: size.width - 20,
            y: 20,
            anchorX: 0.5,
            anchorY: 0.5
        });

        var menu = new cc.Menu(closeItem);
        menu.x = 0;
        menu.y = 0;
        this.addChild(menu, 1);

        /////////////////////////////
        // 3. add your codes below...
        // add a label shows "Hello World"
        // create and initialize a label
        var helloLabel = new cc.LabelTTF("Hello World", "Arial", 38);
        // position the label on the center of the screen
        helloLabel.x = size.width / 2;
        helloLabel.y = 0;
        // add the label as a child to this layer
        this.addChild(helloLabel, 5);

        // add "HelloWorld" splash screen"
        this.sprite = new cc.Sprite(res.HelloWorld_png);
        this.sprite.attr({
            x: size.width / 2,
            y: size.height / 2,
            anchorX: 1,
            anchorY: 1,
            scale: 0.5,
            rotation: 180
        });
        this.addChild(this.sprite, 0);

        /*

        this.sprite.runAction(
            cc.sequence(
                cc.rotateTo(2, 0),
                cc.scaleTo(2, 1, 1)
            )
        );
        helloLabel.runAction(
            cc.spawn(
                cc.moveBy(2.5, cc.p(0, size.height - 40)),
                cc.tintTo(2.5,255,125,0)
            )
        );*/
        return true;
    }
});

var HelloWorldScene = cc.Scene.extend({
    onEnter:function () {
        this._super();
        var layer = new HelloWorldLayer();
        this.addChild(layer);
    }
});

var console=console||{};
(function(cc){
    var keys=["info","debug","error","warn","log","trace"];
    for(var i in keys){
	var key=keys[i];
	if(_.isFunction(console[key])){
		continue;
	}else{
		console[key]=function(){}
	}
    }
})(console)
//dependence:underscore
var module=module||{
    set exports(func){
        func(window);
    }
};//consistent module importing in local & web
module.exports=function(env){
    var gUtil=env.gUtil=env.gUtil||{};
    var Class=gUtil.Class=function(){
        this._id=_.uniqueId();
    }
    this.__super__=false;
    Class.prototype={
        _super:function(){
            if(this.__super__){
                this.__super__.constructor.apply(this,arguments);
            }
        }
    }
    //copy from backbone.js
    var classExtend = function(protoProps, staticProps) {
        var parent = this;
        var cls;

        // The constructor function for the new subclass is either defined by you
        // (the "constructor" property in your `extend` definition), or defaulted
        // by us to simply call the parent's constructor.
        if (protoProps && _.has(protoProps, 'constructor')) {
            cls = protoProps.constructor;
        } else {
            cls = function(){return parent.apply(this, arguments);}
        }

        // Add static properties to the constructor function, if supplied.
        _.extend(cls, parent, staticProps);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        var ClsProto = function(){ this.constructor = cls; };
        ClsProto.prototype = parent.prototype;
        cls.prototype = new ClsProto;

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (protoProps) _.extend(cls.prototype, protoProps);

        // Set a convenience property in case the parent's prototype is needed
        // later.
        cls.__super__ = parent.prototype;

        return cls;
    };
    Class.extend=classExtend;
    //consider the effect of JSON.stringify, use simple message extend
    var Message=gUtil.Message=function(aDict){
        var thisVar=this;
        if(aDict){
            _.each(aDict,function(v,k){
                if(typeof(v)=="function"){
                    return ;
                }else{
                    thisVar[k]=v;
                }
            });
        }
    }
    var messageExtend=function(protoProps){
        var BaseMessage=this;
        var msg=function(){
            var thisVar=this;
            _.each(new BaseMessage(),function(v,k){
                thisVar[k]=v;
            });
            _.each(protoProps,function(v,k){
                thisVar[k]=v;
            });
            if(_.has(protoProps,"constructor")){
                protoProps.constructor.apply(thisVar,arguments);
            }else{
                Message.apply(this,arguments);
            }
        }
        msg.extend=messageExtend;
        return msg;
    }
    Message.extend=messageExtend;
    gUtil.ImplFunc=function(funcList){
        var args=arguments;
        var iTemp=new gUtil.Interface(funcList);
        var reFunc={
            set check(implClass){
                iTemp.checkImpl(implClass);
            }
        }
        return reFunc;
    }
    gUtil.Impl=function(){
        var args=arguments;
        var reFunc={
            set check(implClass){
                _.each(args,function(iClass){
                    iClass.checkImpl(implClass);
                });
            }
        }
        return reFunc;
    }
    gUtil.Interface=function(keys){
        this.checkImpl=function(implClass){
            var unImplFunc=[];
            if(keys instanceof Array){
                unImplFunc=_.filter(keys,function(e){
                    return !(_.has(implClass.prototype,e));
                });
            }else{
                unImplFunc=_.filter(keys,function(v,k){
                    return !(_.has(implClass.prototype,k));
                });
            }
            if(unImplFunc.length>0){
                console.error("func not impl : "+
                              JSON.stringify(unImplFunc));
            }
        }
    }
}


//dependence:underscore
module.exports=function(env){
    var gPoint=env.gPoint=env.gPoint||{};
    gPoint.checkContinuous=function(path){
        for(var i=0,length=path.length;i<length-1;i++){
            var a=path[i];
            var b=path[i+1];
            if(gPoint.maDistance(a,b)!=1){
                return false;
            }
        }
        return true;
    }
    gPoint.isPoint=function(obj){
        if(typeof(obj.i)!="number"){return false;}
        if(typeof(obj.j)!="number"){return false;}
        return true;
    }
    gPoint.isPointArray=function(path){
        //TODO
        console.log("point array TODO");
        return true;
    }
    gPoint.wrapPoint=function(){
        var point={}
        if(arguments.length==1){
            point.i=arguments[0].i;
            point.j=arguments[0].j;
            return point;
        }else if(arguments.length=2){
            point.i=arguments[0];
            point.j=arguments[1];
            return point;
        }else{
            console.error("arguments unexcepted");
            return ;
        }
    }
    gPoint.wrapArgs=function(args,index){
        var index=index||0;
        var point={};

        var tailArgs=_.rest(args,index);
        if(tailArgs.length==2){
            point.i=tailArgs[0];
            point.j=tailArgs[1];
            return point;
        }else if(tailArgs.length==1){
            point.i=tailArgs[0].i;
            point.j=tailArgs[0].j;
            return point;
        }else{
            console.error("arguments unexcepted");
            return ;
        }
    }
    gPoint.maDistance=function(pa,pb){
        var abs=Math.abs;
        return abs(pa.i-pb.i)+abs(pa.j-pb.j);
    }
    gPoint.euDistance=function(pa,pb){
        var di=pa.i-pb.i;
        var dj=pa.j-pb.j;
        return Math.sqrt(di*di+dj*dj);
    }
    // from from+d,from+2d,...,to-d;
    // d=(0,1) or (1,0) or (-1,0) or (0,-1)
    gPoint.range=function(from,to){
        var path=[{i:from.i,j:from.j}];
        if(from.i!=to.i && from.j==to.j){
            var j=from.j;
            var di=(from.i<to.i?1:-1);
            for(var i=from.i+di;i!=to.i;i+=di){
                path.push({i:i,j:j})
            }
        }else if(from.j!=to.j && from.i==to.i){
            var i=from.i;
            var dj=(from.j<to.j?1:-1);
            for(var j=from.j+dj;j!=to.j;j+=dj){
                path.push({i:i,j:j})
            }
        }else return null;
        return path;
    }
    // e.g. radioRange((0,0),1)=
    // [(0,0),(1,0),(0,1),(-1,0),(0,-1)]
    gPoint.radioRange=function(center,range){
        if(range<=0) return [{i:center.i,j:center.j}];
        var rangeArray=[];
        // i=0;
        for(var j=-range;j<=range;j++){
            rangeArray.push({
                i:center.i,
                j:center.j+j
            });
        }
        // i:[1,range]+[-range,-1]
        for(var i=1;i<=range;i++){
            for(var j=-(range-i);j<=range-i;j++){
                rangeArray.push({
                    i:center.i+i,
                    j:center.j+j
                });
                rangeArray.push({
                    i:center.i-i,
                    j:center.j+j
                });
            }
        }
        return rangeArray;
    }
    // return (0,+-1) (+-1,0) (+-1,+-1)
    gPoint.direct=function(srcPoint,dstPoint){
        var di=dstPoint.i-srcPoint.i;
        var dj=dstPoint.j-srcPoint.j;
        if(di==0 && dj==0){
            return null;
        }else{
            var iplusj=di+dj;
            var iminusj=di-dj;
            // excited!!!
            iplusj=iplusj==0?0:(iplusj>0?1:-1);
            iminusj=iminusj==0?0:(iminusj>0?1:-1);
            di=(iplusj+iminusj);
            dj=(iplusj-iminusj);
            di=di==0?0:(di>0?1:-1);
            dj=dj==0?0:(dj>0?1:-1);
            return {i:dj,i:dj};
        }
    }
    // eliminate center
    gPoint.inDirect=function(delta,direct){
        if(direct.i===0){
            var pointDirect=gPoint.direct({i:0,j:0},delta);
            return pointDirect.j===direct.j;
        }else if(direct.j===0){
            var pointDirect=gPoint.direct({i:0,j:0},delta);
            return pointDirect.i===direct.i;
        }else{
            var di=delta.i;
            var dj=delta.j;
            if(di===0){
                dj=dj==0?0:(dj>0?1:-1);
                return dj===direct.j;
            }else if(dj===0){
                di=di==0?0:(di>0?1:-1);
                return di===direct.i;
            }else{
                di=di>0?1:-1;
                dj=dj>0?1:-1;
                return di===direct.i && dj===direct.j;
            }
        }
    }
    gPoint.directRange=function(center,direct,range){
        console.log("not implement");
    }
    // canMoveFunc =function(i,j){return true or false;}
    gPoint.shortestPath=function(from,to,canMoveFunc){
        var src={i:from.i, j:from.j};
        var dst={i:to.i, j:to.j};

        var hash=function(node){
            return node.i*1000+node.j;
        }
        var reHash=function(h){
            return {
                i:Math.floor(h/1000),
                j:h%1000
            }
        }
        src.g=0;
        src.h=gPoint.maDistance(src,dst);
        src.pre=null;
        var openFirst=0;
        var openLast=0;
        var open=[src];
        var getSmallestIndex=function(){
            var temp=open[openFirst];
            var index=openFirst;
            for(var i=openFirst+1;i<=openLast;i++){
                var point=open[i];
                if(point.g+point.h<temp.g+temp.h){
                    temp=point;
                    index=i;
                }
            }
            return index;
        }
        var closeHash={};
        var self=this;
        var expand=function(index){
            var point=open[index];
            var expandList=[
                {i:point.i+1,j:point.j},
                {i:point.i-1,j:point.j},
                {i:point.i,j:point.j+1},
                {i:point.i,j:point.j-1}
            ];
            expandList=_.filter(expandList,function(newPoint){
                var i=newPoint.i;
                var j=newPoint.j;
                if(!canMoveFunc(i,j)) return false;
                if(closeHash[hash(point)]) return false;
                return true;
            });
            _.each(expandList,function(newPoint){
                newPoint.g=point.g+1;
                newPoint.h=gPoint.maDistance(newPoint,dst);
                newPoint.pre=point;
                open.push(newPoint);
                openLast++;
            });
            open[index]=open[openFirst];
            open[openFirst]=point;
            openFirst++;
            closeHash[hash(point)]=point;
        }
        while(openFirst<=openLast){
            var chooseIndex=getSmallestIndex();
            var choose=open[chooseIndex];
            if(choose.h==1){
                var re=[dst];
                var temp=choose;
                while(true){
                    re.push(temp);
                    temp=temp.pre;
                    if(temp==null){
                        break;
                    }
                }
                return re.reverse();
            }else{
                expand(chooseIndex);
            }
        }
        return [];
    }

    var xyPoint=env.xyPoint=env.xyPoint||{};
    xyPoint.maDistance=function(pa,pb){
        var abs=Math.abs;
        return abs(pa.x-pb.x)+abs(pa.y-pb.y);
    }
    xyPoint.euDistance=function(pa,pb){
        var dx=pa.x-pb.x;
        var dy=pa.y-pb.y;
        return Math.sqrt(dx*dx+dy*dy);
    }
}


module.exports=function(env){
///{{{
var gCore=env.gCore=env.gCore||{}
gCore.GameTop=gUtil.Class.extend({
	moduleClasses:[
	],
	constructor:function(classes){
		var thisVar=this;
		_.each(classes,function(aClass){
    		thisVar.moduleClasses.push(aClass);
		});
	},
	moduleDict:{},
	modules:[],
	init:function(){
		var thisVar=this;
		var moduleClasses=this.moduleClasses;
		var modules=this.modules;
		_.each(moduleClasses,function(moduleClass){
			var moduleInst=new moduleClass();
			modules.push(moduleInst);
			thisVar.moduleDict[moduleInst.name]=moduleInst;
		});
		_.each(modules,function(moduleInst){
			moduleInst.init(thisVar);
		});
		_.each(modules,function(moduleInst){
			moduleInst.start(thisVar);
		});
	},
	getModule:function(name){
		var re=this.moduleDict[name];
		if(!re){
			console.log("GameTop.getModule error");
		}else{
			return re;
		}
	}
},{
	webMain:function(){
		var gameInst=new gCore.GameTop([
            gInter.WebClientModule,
		    gUI.ModelManager,
		    gUI.ViewManager,
            gUI.FrontendModule
		]);
		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	},
	localMain:function(){
		var gameInst=new gCore.GameTop([
		    gController.BattleManager,
		    gController.GameController,
		    gInter.LocalClientModule,
		    gInter.LocalServerModule,
		    gUI.ModelManager,
		    gUI.ViewManager,
		    gUI.FrontendModule
		]);

		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	},
	serverMain:function(){
		var gameInst=new gCore.GameTop([
			gInter.HttpServerModule
		]);


		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	},
	androidMain:function(){
		var gameInst=new gCore.GameTop([
		    gController.BattleManager,
		    gController.GameController,
		    gInter.LocalClientModule,
		    gInter.LocalServerModule,
		    gUI.ModelManager,
		    gUI.ViewManager,
		    gUI.FrontendModule
		]);

		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	},
	aigameMain:function(){
		var gameInst=new gCore.GameTop([
		    gAI.AIGameModelManager,
		    gAI.AIGameViewManager,
		    gAI.AIGameFrontendModule
		]);

		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	},
	movegameMain:function(){
		var gameInst=new gCore.GameTop([
		    gMove.MoveGameModelManager,
		    gMove.MoveGameViewManager,
		    gMove.MoveGameFrontendModule
		]);

		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	},
	gameMain:function(){
		var gameInst=new gCore.GameTop([
		    game.ModelManager,
		    game.ViewManager,
		    game.ControlManager
        ]);

		gameInst.init();
		gCore.gameInst=gameInst;
		return gameInst;
	}
});


gCore.Module=gUtil.Class.extend({
	init:function(){
	},
	start:function(){
	},
	getServiceImpls:function(){
		return [];
	}
});
gCore.Service=gUtil.Class.extend({
});
//}}}
};
var game=game||{};
var gameConst={
    LOGIC_DURATION:0.1
}
game.ControlManager=gUtil.Class.extend({

    modelManager:null,
    viewManager:null,

    gameTop:null,


    name:"controlModule",
    init:function(gameTop){
        if(gameTop){
	        this.modelManager=gameTop.getModule("modelModule");
	        this.viewManager=gameTop.getModule("viewModule");
            this.gameTop=gameTop;
        }
    },
    start:function(gameTop){
    }

});
var game=game||{};
game.ViewManager=gUtil.Class.extend({
    controlModule:null,
    modelManager:null,

    moveSpeed:10,//1 cell 1 second
    bulletSpeed:20,

    gameLayer:null,
    frameItem:null,
    mainScene:null,

    name:"viewModule",

    init:function(gameTop){
        var thisVar=this;
        if(gameTop){
		    this.modelManager=gameTop.getModule("modelModule");
            this.controlModule=gameTop.getModule("controlModule");
        }

    },
    start:function(gameTop){
        var thisVar=this;
        var modelManager=this.modelManager;
	    this.mainScene=new gameView.MainScene();
	    this.gameLayer=new gameView.GameLayer(gameTop);
        this.frameItem=new cc.Node();
        this.gameLayer.addChild(this.frameItem);
        this.frameItem.schedule(function(dt){
            thisVar.modelManager.timeUpdate(dt);
        });

        this.mainScene.bind(gameTop);
    },
    reRender:function(){
        var thisVar=this;
        var modelManager=this.modelManager;

        this.gameLayer.render();
        console.log("view reRender");
    },


    //////////
    // show //
    //////////
    /* bullet */
    showBulletCreate:function(bullet){
        this.gameLayer.bulletNode.shotBulletView(bullet);
    },
    showBulletExplode:function(bulletId){
        this.gameLayer.bulletNode.explodeBullet(bulletId);
    },
    showBulletDelete:function(bulletId){
        this.gameLayer.bulletNode.deleteBullet(bulletId);
        // TODO
    },

    /* unit */
    showUnitCreate:function(unitModel){
        this.gameLayer.unitNode.createUnitView(unitModel);
    },
    showUnitAttrUpdate:function(unitId,attrKey,attrValue){
        var unitView=this.gameLayer.unitNode.unit$(unitId);
        if(_.isObject(unitView)){
            unitView.setAttr(attrKey,attrValue);
        }else{
            console.warn("unit view not found for id="+unitId);
        }
    },
    showUnitAttack:function(srcUnitId,dstUnitIdSet){
        this.gameLayer.animateNode.actionUnitAttack(srcUnitId,dstUnitIdSet);
    },
    showUnitMove:function(unitId,dstIJ,duration){
        this.gameLayer.unitNode.actionUnitIdMove(unitId,dstIJ,duration);
    },
    showUnitDelete:function(unitId){
        this.gameLayer.unitNode.deleteUnitView(unitId);
    },


    // getter
    getGameLayer:function(){
        return this.gameLayer;
    },
    getUnitViewPool:function(){
        return this.gameLayer.unitNode;
    },
    getBulletViewPool:function(){
        return this.gameLayer.bulletNode;
    },
    getAnimateNode:function(){
        return this.gameLayer.animateNode;
    },




    destroy:function(){
    }
});
var game=game||{};
game.ModelManager=gUtil.Class.extend({

    name:"modelModule",
    controlModule:null,
    viewManager:null,

    iLength:10,
    jLength:6,

    runFlag:false,

    battleModel:"battleModel",

    init:function(gameTop){
        var thisVar=this;
        if(gameTop){
	        this.controlModule=gameTop.getModule("controlModule");
            this.viewManager=gameTop.getModule("viewModule");
        }

    },

    start:function(gameTop){
        this.battleModel=new gameModel.BattleModel(gameTop);
    },
    timeUpdate:function(dt){
        if(this.runFlag){
            this.battleModel.timeUpdate(dt);
        }
    },
    runGame:function(){
        this.runFlag=true;
    },
    destroy:function(){
    },
    unit$:function(){
        return this.battleModel.unit$.apply(this.battleModel,arguments);
    }
});
var gameTest=gameTest||{}
var gameInstTest=null;
var viewTest=null;
var modelTest=null;
var battleTest=null;
var dosthTest=null;
gameTest.init=function(gameInst){
    gameInstTest=gameInst;
    viewTest=gameInst.getModule("viewModule");
    modelTest=gameInst.getModule("modelModule");
    battleTest=modelTest.battleModel;
    battleTest.createUnit("attacker",0,4);
    battleTest.createUnit("attacker",1,4);
    battleTest.createUnit("slowGun",9,0);
    battleTest.createUnit("slowGun",5,5);
    battleTest.createUnit("slowGun",1,0);
    viewTest.reRender();
}
var gMove=gMove||{};
gMove.MoveGameModelManager=gUtil.Class.extend({

    name:"modelModule",
    frontendModule:null,
    viewManager:null,


    iLength:6,
    jLength:8,

    score:0,
    tempScore:0,
    maxTempScore:0,
    trailModel:null,

    init:function(gameTop){
        var thisVar=this;
        if(gameTop){
	        this.frontendModule=gameTop.getModule("frontendModule");
            this.viewManager=gameTop.getModule("viewModule");
        }

    },

    // use A*
    shortpath:function(src,dst){
        var hash=function(node){
            return node.i*100+node.j;
        }
        var reHash=function(h){
            return {
                i:Math.floor(h/100),
                j:h%100
            }
        }
        src.g=0;
        src.h=gPoint.maDistance(src,dst);
        src.pre=null;
        var openFirst=0;
        var openLast=0;
        var open=[src];
        var getSmallestIndex=function(){
            var temp=open[openFirst];
            var index=openFirst;
            for(var i=openFirst+1;i<=openLast;i++){
                var point=open[i];
                if(point.g+point.h<temp.g+temp.h){
                    temp=point;
                    index=i;
                }
            }
            return index;
        }
        var closeHash={};
        var self=this;
        var expand=function(index){
            var point=open[index];
            var expandList=[
                {i:point.i+1,j:point.j},
                {i:point.i-1,j:point.j},
                {i:point.i,j:point.j+1},
                {i:point.i,j:point.j-1}
            ];
            expandList=_.filter(expandList,function(newPoint){
                var i=newPoint.i;
                var j=newPoint.j;
                if(!self.valid(i,j)) return false;
                if(self.trailModel.trailContain(i,j)) return false;
                if(closeHash[hash(point)]) return false;
                return true;
            });
            _.each(expandList,function(newPoint){
                newPoint.g=point.g+1;
                newPoint.h=gPoint.maDistance(newPoint,dst);
                newPoint.pre=point;
                open.push(newPoint);
                openLast++;
            });
            open[index]=open[openFirst];
            open[openFirst]=point;
            openFirst++;
            closeHash[hash(point)]=point;
        }
        while(openFirst<=openLast){
            var chooseIndex=getSmallestIndex();
            var choose=open[chooseIndex];
            if(choose.h==1){
                // TODO
                var re=[];
                var temp=choose;
                while(true){
                    re.push(temp);
                    temp=temp.pre;
                    if(temp==null){
                        break;
                    }
                }
                return re.reverse();
            }else{
                expand(chooseIndex);
            }
        }
        return [];
    },
    start:function(gameTop){
        this.trailModel=new gMove.TrailModel();
    },
    doShow:function(){
        var trailPath=this.trailModel.getTrailPath();
        var operPath=this.trailModel.getOperPath();
        this.viewManager.animateShowTrailPath(trailPath);
        this.viewManager.animateShowOperPath(operPath);
    },


    trail$:function(){
        return this.trailModel;
    },
    valid:function(i,j){
        if(i>=0 && i<this.iLength && j>=0 && j<this.jLength){
            return true;
        }else{
            return false;
        }
    },

    doScore:function(increase){
        if(increase){
            this.score+=1;
            this.tempScore+=1;
            if(this.maxTempScore<this.tempScore){
                this.maxTempScore=this.tempScore;
            }
            this.viewManager.animateShowScore(this.score);
            this.viewManager.animateShowTempScore(this.tempScore,this.maxTempScore);
        }else{
            this.tempScore=0;
            this.viewManager.animateShowScore(this.score);
            this.viewManager.animateShowTempScore(this.tempScore,this.maxTempScore);
        }
    },

    startOper:function(i,j){
        this.trailModel.resetOper();
        this.trailModel.oper(i,j);
        this.doShow();
        this.doScore(false);
    },
    moveOper:function(i,j){
        var self=this;
        if(this.valid(i,j)){
            if(!this.trailModel.trailContain(i,j)){
                return ;
            }
            var increase=this.trailModel.oper(i,j);
            this.doScore(increase);
            var last=_.last(this.trailModel.getTrailPath());
            var nextList=[
                {i:last.i+1,j:last.j},
                {i:last.i-1,j:last.j},
                {i:last.i,j:last.j+1},
                {i:last.i,j:last.j-1}
            ];
            nextList=_.filter(nextList,function(nextPoint){
                var i=nextPoint.i;
                var j=nextPoint.j;
                if(!self.valid(i,j)) return false;
                if(self.trailModel.trailContain(i,j)) return false;
                var shortpath=self.shortpath(nextPoint,self.trailModel.getFirst());
                if(shortpath.length<=0) return false;
                return true;
            });
            var next=this.random(nextList);
            if(!next){
                return ;
            }else{
                this.trailModel.next(next.i,next.j);
                this.doShow();
            }
        }
    },
    random:function(list){
        var length=list.length;
        var r=Math.random()
        for(var i=0;i<length;i++){
            if(r<(i+1)/length){
                return list[i];
            }
        }
        return list[length-1];
    },

    destroy:function(){
    }
});
gMove.TrailModel=gUtil.Class.extend({
    trailPath:null,
    operPath:null,
    length:6,
    constructor:function(){
        this.trailPath=new Array(this.length);
        this.operPath=[];
        for(var i=0;i<this.length;i++){
            this.trailPath[i]={
                i:i,
                j:0
            };
        }
    },
    next:function(i,j){
        var temp=_.rest(this.trailPath);
        temp.push({
            i:i,
            j:j
        });
        this.trailPath=temp;
    },
    oper:function(i,j){
        var inTrail=false;
        var inOper=false;
        _.each(this.trailPath,function(point){
            if(point.i==i && point.j==j){
                inTrail=true;
            }
        });
        _.each(this.operPath,function(point){
            if(point.i==i && point.j==j){
                inOper=true;
            }
        });
        if(inTrail && !inOper){
            this.operPath.push({
                i:i,
                j:j
            });
            var restartIndex=this.operPath.length-3;
            restartIndex=restartIndex>=0?restartIndex:0;
            this.operPath=_.rest(this.operPath,restartIndex);
            return true;
        }else{
            this.operPath=[];
            return false;
        }
    },
    getTrailPath:function(){
        return this.trailPath;
    },
    getOperPath:function(){
        return this.operPath;
    },
    trailContain:function(i,j){
        var inTrail=false;
        _.each(this.trailPath,function(point){
            if(point.i==i && point.j==j){
                inTrail=true;
            }
        });
        return inTrail;
    },
    resetOper:function(){
        this.operPath=[]
    },
    isFirst:function(i,j){
        var first=this.trailPath[0];
        return first.i==i && first.j==j;
    },
    getFirst:function(){
        return this.trailPath[0];
    }
});
var gMove=gMove||{};
var htmlView; // a global ver for debug
gMove.MoveGameViewManager=gUtil.Class.extend({
    frontendModule:null,
    modelManager:null,

    moveSpeed:10,//1 cell 1 second
    bulletSpeed:20,

    gameLayer:null,
    frameItem:null,
    mainScene:null,

    name:"viewModule",

    init:function(gameTop){
        var thisVar=this;
        if(gameTop){
		    this.modelManager=gameTop.getModule("modelModule");
            this.frontendModule=gameTop.getModule("frontendModule");
        }

	    //for test
	    htmlView=this;
    },
    start:function(gameTop){
        var thisVar=this;
        var modelManager=this.modelManager;
	    this.mainScene=new gMove.MainScene();
	    this.gameLayer=new gMove.GameLayer(gameTop);
        this.frameItem=new cc.Node();
        this.gameLayer.addChild(this.frameItem);

        this.mainScene.bind(gameTop);
    },
    reRender:function(){
        var thisVar=this;
        var modelManager=this.modelManager;

        this.gameLayer.render();
        console.log("view reRender");
    },
    getGameLayer:function(){
        return this.gameLayer;
    },
    getAreaNode:function(){
        return this.gameLayer.getAreaNode();
    },

    animateShowScore:function(score){
        this.gameLayer.setScore(score);
    },
    animateShowTempScore:function(score,maxScore){
        this.gameLayer.setTempScore(score,maxScore);
    },
    animateShowTrailPath:function(path){
        var gameLayer=this.gameLayer;
        this.frameItem.runAction(cc.callFunc(function(){
            var trailNode=gameLayer.getTrailNode();
            trailNode.showTrail(path);
        }));
    },
    animateShowOperPath:function(path){
        var gameLayer=this.gameLayer;
        this.frameItem.runAction(cc.callFunc(function(){
            var trailNode=gameLayer.getTrailNode();
            trailNode.showOper(path);
        }));
    },

    destroy:function(){
    }
});
var gMove=gMove||{};
gMove.MoveGameFrontendModule=gUtil.Class.extend({

    modelManager:null,
    viewManager:null,

    gameTop:null,


    name:"frontendModule",
    init:function(gameTop){
        if(gameTop){
	        this.modelManager=gameTop.getModule("modelModule");
	        this.viewManager=gameTop.getModule("viewModule");
            this.gameTop=gameTop;
        }
    },
    start:function(gameTop){
    },
    startOper:function(i,j){
        this.modelManager.startOper(i,j);
    },
    moveOper:function(i,j){
        this.modelManager.moveOper(i,j);
    }

});
var gMove=gMove||{};
gMove.AreaNode = cc.Node.extend({
    LEVEL_AREA:1,
    gameLayer:null,
    areaDraw:null,
    ctor:function(gameLayer,gameTop){
        this._super();
        this.gameLayer=gameLayer;

        this.areaDraw=new cc.DrawNode();
        this.addChild(this.areaDraw,this.LEVEL_AREA);
    },
    render:function(){
        this.showArea();
    },
    destroy:function(){
        this.areaDraw.clear();
    },
    showArea:function(){
        this.areaDraw.clear();
        var gameLayer=this.gameLayer;
	    var iLength=gameLayer.iLength;
	    var jLength=gameLayer.jLength;
	    var draw=this.areaDraw;
	    for(var i=0;i<iLength;i++){
		    for(var j=0;j<jLength;j++){
			    var fillColor=(i+j)%2==0?cc.color(255,255,0,30):cc.color(255,0,0,30);
			    draw.drawRect(gameLayer.pLeftBottom(i,j),gameLayer.pRightTop(i,j),fillColor,1,fillColor);
		    }
	    }
    }
});

var gMove=gMove||{};
gMove.GameLayer = cc.Layer.extend({
    LEVEL_AREA:0,
    LEVEL_TRAIL:1,
    LEVEL_USER:3,
    LEVEL_MENU:4,


    dx:50,
    dy:50,
    baseX:0,
    baseY:0,
    iLength:0,
    jLength:0,


    // child node
    userInputCtrl:null,
    trailNode:null,
    areaNode:null,
    scoreNode:null,
    tempScoreNode:null,


    // game module
    actionHandler:null,
    viewManager:null,
    modelManager:null,

    ctor:function (gameTop) {
        this._super();

	    this.viewManager=gameTop.getModule("viewModule");
	    this.modelManager=gameTop.getModule("modelModule");
	    this.actionHandler=gameTop.getModule("frontendModule");

	    this.userInputCtrl=new gMove.UserInputCtrl(this,gameTop);
        this.addChild(this.userInputCtrl,this.LEVEL_USER);

        this.areaNode=new gMove.AreaNode(this,gameTop);
        this.addChild(this.areaNode,this.LEVEL_AREA);

        this.trailNode=new gMove.TrailNode(this,gameTop);
        this.addChild(this.trailNode,this.LEVEL_TRAIL);

        this.scoreNode=new cc.LabelTTF("0","Arial",38);
        this.scoreNode.setFontFillColor(cc.color(255,255,255));
        this.addChild(this.scoreNode,this.LEVEL_TRAIL);

        this.tempScoreNode=new cc.LabelTTF("0","Arial",38);
        this.tempScoreNode.setFontFillColor(cc.color(255,255,255));
        this.addChild(this.tempScoreNode,this.LEVEL_TRAIL);

	    this.setAnchorPoint(cc.p(0,0));
        return true;
    },
    setScore:function(score){
        var scoreNode=this.scoreNode;
        scoreNode.runAction(cc.callFunc(function(){
            scoreNode.setString(String(score))
        }));
    },
    setTempScore:function(score,maxScore){
        var scoreNode=this.tempScoreNode;
        scoreNode.runAction(cc.callFunc(function(){
            scoreNode.setString(String(score)+"/"+String(maxScore))
        }));
    },
    valid:function(i,j){
        if(i<0||i>=this.iLength){
            return false;
        }
        if(j<0||j>=this.jLength){
            return false;
        }
        return true;
    },
    render:function(){
        console.log("layer render");

        // set i,j length
        this.iLength = this.modelManager.iLength;
        this.jLength = this.modelManager.jLength;

        // set dx,dy
        var size=cc.director.getWinSize();
        //this.baseX=size.height/20;
        //this.baseY=size.height/20;
        this.baseX=0;
        this.baseY=0;
        this.dx=(size.height-this.baseX*2)/(this.iLength);
        this.dy=this.dx;

        this.setPosition(cc.p(this.baseX,this.baseY));

	    this.areaNode.render();

        this.scoreNode.attr({
            x:size.width-this.baseX,
            y:size.height-this.baseY,
            anchorX:1,
            anchorY:1
        });

        this.tempScoreNode.attr({
            x:size.width-this.baseX,
            y:size.height-this.baseY-40,
            anchorX:1,
            anchorY:1
        });
    },

    xy2ij:function(x,y){
	    var cellSize={
		    dx:this.getScaleX()*this.dx,
		    dy:this.getScaleX()*this.dy,
	    }
	    var cellBase=this.getPosition();
	    var xx=Math.floor((x-cellBase.x)/cellSize.dx);
	    var yy=Math.floor((y-cellBase.y)/cellSize.dy);
	    return {i:this.iLength-1-yy,j:xx};
    },
    p2ij:function(p){
	    return this.xy2ij(p.x,p.y);
    },
    pLeftBottom:function(i,j){
	    var cellXY=(function(i,j){
	        var xx=j;
	        var yy=this.iLength-1-i;
	        return cc.p(xx,yy);
        }).call(this,i,j);
	    return cc.p(cellXY.x*this.dx,cellXY.y*this.dy)
    },
    pRightTop:function(i,j){
	    var base=this.pLeftBottom(i,j);
	    return cc.p(base.x+this.dx,base.y+this.dy);
    },
    pCenter:function(i,j){
	    var base=this.pLeftBottom(i,j);
	    return cc.p(base.x+this.dx/2,base.y+this.dy/2);
    },
    pFloat:function(i,j){
	    var cellXY=(function(i,j){
	        var xx=j;
	        var yy=this.iLength-i;
	        return cc.p(xx,yy);
        }).call(this,i,j);
	    return cc.p(cellXY.x*this.dx,cellXY.y*this.dy)
    },
    /*
    pLeftMiddle:function(i,j){
    },
    pRightMiddle:function(i,j){
    },
    pTopMiddle:function(i,j){
    },
    pBottomMiddle:function(i,j){
    },*/
    cellSize:function(){
        return {
            width:this.dx,
            height:this.dy
        }
    },
    getAreaNode:function(){
        return this.areaNode;
    },
    getTrailNode:function(){
        return this.trailNode;
    },
    destroy:function(){
        this.userInputCtrl.cancel();
        this.areaNode.destroy();
    }
});

gMove.MainScene = cc.Scene.extend({
    gameLayer:null,
    scriptMenu:null,

    bind:function(gameTop){
	    this.gameLayer=gameTop.getModule("viewModule").gameLayer;
    },
    onEnter:function () {
        this._super();
        this.addChild(this.gameLayer,1);
    }
});


var gMove=gMove||{};
gMove.TrailNode = cc.Node.extend({
    LEVEL_TRAIL:1,
    LEVEL_OPER:2,

    sprite:null,

    trailDraw:null,
    operDraw:null,

    gameLayer:null,
    gameTop:null,

    ctor:function(gameLayer,gameTop){
        this._super();
        this.gameLayer=gameLayer;
        this.gameTop=gameTop;

        this.trailDraw=new cc.DrawNode();
        this.addChild(this.trailDraw, this.LEVEL_TRAIL);

        this.operDraw=new cc.DrawNode();
        this.addChild(this.operDraw, this.LEVEL_OPER);

        this.attr({
            x:0,
            y:0
        });
    },
    showTrail:function(path){
        this.trailDraw.clear();
        var gameLayer=this.gameLayer;
	    var draw=this.trailDraw;
	    var pre=null;
	    for(var i=0,l=path.length;i<l;i++){
		    if(pre===null){
			    var center=gameLayer.pCenter(path[i].i,path[i].j);
			    draw.drawDot(center,10,cc.color(0,255,0));
			    pre=path[i];
		    }else{
			    var from=gameLayer.pCenter(pre.i,pre.j);
			    var to=gameLayer.pCenter(path[i].i,path[i].j);
			    draw.drawSegment(from,to,5,cc.color(0,255,0));
			    pre=path[i];
		    }
	    }
    },
    showOper:function(path){
        this.operDraw.clear();
        var gameLayer=this.gameLayer;
	    var draw=this.operDraw;
	    var pre=null;
	    for(var i=0,l=path.length;i<l;i++){
		    if(pre===null){
			    var center=gameLayer.pCenter(path[i].i,path[i].j);
			    draw.drawDot(center,5,cc.color(0,255,0));
			    pre=path[i];
		    }else{
			    var from=gameLayer.pCenter(pre.i,pre.j);
			    var to=gameLayer.pCenter(path[i].i,path[i].j);
			    draw.drawSegment(from,to,5,cc.color(255,255,0));
			    pre=path[i];
		    }
	    }
    }
});


var gMove=gMove||{};
gMove.UserInputCtrl=cc.Node.extend({
    STATE_EMPTY:0,
    STATE_PATHING:1,

    state:0,

    pathingType:null,

    preArea:null,

    ctor:function(gameLayer,gameTop){
        this._super();


        this.gameLayer=gameLayer;

	    this.viewManager=gameTop.getModule("viewModule");
	    this.modelManager=gameTop.getModule("modelModule");
	    this.frontendModule=gameTop.getModule("frontendModule");

        var gameLayer=this.gameLayer;
        var user=this;
	    var listener=cc.EventListener.create({
		    event:cc.EventListener.TOUCH_ONE_BY_ONE,
	        swallowTouches: true,
		    onTouchBegan:function(touch,event){
			    gTest.target=event.getCurrentTarget();
			    var ij=gameLayer.p2ij(touch.getLocation());
                return user.beginArea(ij.i,ij.j);
		    },
		    onTouchMoved:function(touch,event){
			    var ij=gameLayer.p2ij(touch.getLocation());
			    user.moveArea(ij.i,ij.j);
		    },
		    onTouchEnded:function(touch,event){
			    var ij=gameLayer.p2ij(touch.getLocation());
			    user.endArea(ij.i,ij.j);
		    }
	    });

	    cc.eventManager.addListener(listener,this);
    },
    beginArea:function(i,j){
        var gameLayer=this.gameLayer;
        if(gameLayer.valid(i,j)){
            this.preArea={
                i:i,
                j:j
            }
            this.frontendModule.startOper(i,j);
            return true;
        }else{
            return false;
        }
    },
    moveArea:function(i,j){
        var gameLayer=this.gameLayer;
        if(gameLayer.valid(i,j)){
            if(this.preArea.i==i && this.preArea.j==j){
                return ;
            }else{
                this.frontendModule.moveOper(i,j);
                this.preArea={
                    i:i,
                    j:j
                }
            }
        }else{
            this.cancel();
            return ;
        }
    },
    endArea:function(){
        this.cancel();
    },
    movePos:function(x,y){
    },
    cancel:function(){
    },
});
var gameView=gameView||{};
gameView.AreaNode = cc.Node.extend({
    LEVEL_AREA:1,
    gameLayer:null,
    areaDraw:null,
    ctor:function(gameLayer,gameTop){
        this._super();
        this.gameLayer=gameLayer;

        this.areaDraw=new cc.DrawNode();
        this.addChild(this.areaDraw,this.LEVEL_AREA);
    },
    render:function(){
        this.showArea();
    },
    destroy:function(){
        this.areaDraw.clear();
    },
    showArea:function(){
        this.areaDraw.clear();
        var gameLayer=this.gameLayer;
	    var iLength=gameLayer.iLength;
	    var jLength=gameLayer.jLength;
	    var draw=this.areaDraw;
	    for(var i=0;i<iLength;i++){
		    for(var j=0;j<jLength;j++){
			    var fillColor=(i+j)%2==0?cc.color(255,255,0,30):cc.color(255,0,0,30);
                var rightTop=gameLayer.pRightTop(i,j);
			    draw.drawRect(gameLayer.pLeftBottom(i,j),rightTop,fillColor,1,fillColor);
		    }
	    }
    },
});

var gameView=gameView||{};
gameView.GameLayer = cc.Layer.extend({
    LEVEL_AREA:0,
    LEVEL_TRAIL:1,
    LEVEL_UNIT:2,
    LEVEL_USER:3,
    LEVEL_ANIMATE:4,
    LEVEL_BULLET:5,
    LEVEL_MENU:6,


    dx:50,
    dy:50,
    baseX:0,
    baseY:0,
    iLength:0,
    jLength:0,


    // child node
    userInputCtrl:null,
    trailNode:null,
    areaNode:null,
    scoreNode:null,
    animateNode:null,
    bulletNode:null,
    tempScoreNode:null,


    // game module
    controlManager:null,
    viewManager:null,
    modelManager:null,

    ctor:function (gameTop) {
        this._super();

	    this.viewManager=gameTop.getModule("viewModule");
	    this.modelManager=gameTop.getModule("modelModule");
	    this.controlManager=gameTop.getModule("controlModule");

	    this.userInputCtrl=new gameView.UserInputCtrl(this,gameTop);
        this.addChild(this.userInputCtrl,this.LEVEL_USER);

        this.areaNode=new gameView.AreaNode(this,gameTop);
        this.addChild(this.areaNode,this.LEVEL_AREA);

        this.unitNode=new gameView.UnitViewPool(this,gameTop);
        this.addChild(this.unitNode,this.LEVEL_UNIT);

        this.scoreNode=new cc.LabelTTF("","Arial",38);
        this.scoreNode.setFontFillColor(cc.color(255,255,255));
        this.addChild(this.scoreNode,this.LEVEL_TRAIL);

        this.animateNode=new gameView.AnimateNode(this,gameTop);
        this.addChild(this.animateNode,this.LEVEL_ANIMATE);

        this.bulletNode=new gameView.BulletViewPool(this,gameTop);
        this.addChild(this.bulletNode,this.LEVEL_BULLET);


	    this.setAnchorPoint(cc.p(0,0));

        return true;
    },
    setScore:function(score){
        var scoreNode=this.scoreNode;
        return ;
        scoreNode.runAction(cc.callFunc(function(){
            scoreNode.setString(String(score))
        }));
    },
    setTempScore:function(score,maxScore){
        var scoreNode=this.tempScoreNode;
        return ;
        scoreNode.runAction(cc.callFunc(function(){
            scoreNode.setString(String(score)+"/"+String(maxScore))
        }));
    },
    valid:function(i,j){
        if(i<0||i>=this.iLength){
            return false;
        }
        if(j<0||j>=this.jLength){
            return false;
        }
        return true;
    },
    render:function(){
        console.log("layer render");

        // set i,j length
        this.iLength = this.modelManager.iLength;
        this.jLength = this.modelManager.jLength;

        // set dx,dy
        var size=cc.director.getWinSize();
        //this.baseX=size.height/20;
        //this.baseY=size.height/20;
        this.baseX=0;
        this.baseY=0;
        this.dy=(size.height-this.baseY*2)/(this.jLength);
        this.dx=this.dy;

        this.setPosition(cc.p(this.baseX,this.baseY));

	    this.areaNode.render();
	    this.unitNode.render();

        this.scoreNode.attr({
            x:size.width-this.baseX,
            y:size.height-this.baseY,
            anchorX:1,
            anchorY:1
        });

    },

    xy2ij:function(x,y){
	    var cellSize={
		    dx:this.getScaleX()*this.dx,
		    dy:this.getScaleX()*this.dy,
	    }
	    var cellBase=this.getPosition();
        return {
            i:Math.floor((x-cellBase.x)/cellSize.dx),
            j:Math.floor((y-cellBase.y)/cellSize.dy)
        }
    },
    p2ij:function(p){
	    return this.xy2ij(p.x,p.y);
    },
    pLeftBottom:function(i,j){
	    return cc.p(i*this.dx,j*this.dy)
    },
    pRightTop:function(i,j){
	    var base=this.pLeftBottom(i,j);
	    return cc.p(base.x+this.dx,base.y+this.dy);
    },
    pCenter:function(i,j){
	    var base=this.pLeftBottom(i,j);
	    return cc.p(base.x+this.dx/2,base.y+this.dy/2);
    },
    /*
    pLeftMiddle:function(i,j){
    },
    pRightMiddle:function(i,j){
    },
    pTopMiddle:function(i,j){
    },
    pBottomMiddle:function(i,j){
    },*/
    cellSize:function(){
        return {
            width:this.dx,
            height:this.dy
        }
    },
    getAreaNode:function(){
        return this.areaNode;
    },
    getTrailNode:function(){
        return this.trailNode;
    },
    destroy:function(){
        this.userInputCtrl.cancel();
        this.areaNode.destroy();
    },
});

gameView.MainScene = cc.Scene.extend({
    gameLayer:null,

    bind:function(gameTop){
	    this.gameLayer=gameTop.getModule("viewModule").gameLayer;
    },
    onEnter:function () {
        this._super();
        this.addChild(this.gameLayer,1);
    }
});


var gameView=gameView||{};
gameView.UnitViewPool = cc.Node.extend({
    LEVEL_RANGE:0,
    LEVEL_FUTURE:1,
    LEVEL_UNIT:2,
    RANGE_COLOR:cc.color(200,0,0),
    FUTURE_COLOR:cc.color(255,0,255),
    gameLayer:"gameLayer",
    modelManager:"modelManager",
    idToUnitView:"dict",
    rangeNode:"cc.DrawNode",
    futureNode:"cc.DrawNode",

    ctor:function(gameLayer,gameTop){
        this._super();
        this.gameLayer=gameLayer;
        this.modelManager=gameTop.getModule("modelModule");
        this.idToUnitView={};
    },
    render:function(){
        this.destroy();
        var unitModels=this.modelManager.unit$();
        _.each(unitModels,function(unitModel){
            this.createUnitView(unitModel);
        },this);

        // range area
        this.rangeNode=new cc.DrawNode();
        this.addChild(this.rangeNode,this.LEVEL_RANGE);
        // future show
        this.futureNode=new cc.DrawNode();
        this.addChild(this.futureNode,this.LEVEL_FUTURE);
    },
    destroy:function(){
        this.idToUnitView={};
        this.removeAllChildren(true);
    },
    createUnitView:function(unitModel){
        var unitView=new gameView.UnitView(unitModel,this.gameLayer);
        this.idToUnitView[unitModel.unitId]=unitView;
        this.addChild(unitView,this.LEVEL_UNIT);

        var ij=unitModel.getPosition();
        var xy=this.gameLayer.pCenter(ij.i,ij.j);
        unitView.attr({
            x:xy.x,
            y:xy.y,
            anchorX:0.5,
            anchorY:0.5
        });
        unitView.setAttr("ap",unitModel.battleAttr.ap);
        unitView.setAttr("hp",unitModel.battleAttr.hp);
        return unitView;
    },
    deleteUnitView:function(unitId){
        var unit=this.idToUnitView[unitId];
        delete this.idToUnitView[unitId];
        unit.gameLayer=null;
        unit.unitModel=null;
        unit.removeFromParent();
    },
    actionUnitIdMove:function(unitId,dstIJ,duration){
        var dstPoint=this.gameLayer.pCenter(dstIJ.i,dstIJ.j);
        var unit=this.idToUnitView[unitId];
        if(_.isObject(unit)){
            unit.stopAllActions();
            unit.runAction(cc.moveTo(duration,dstPoint));
        }else{
            console.error("unitView with unitId not existed"+unitId);
        }
    },
    unit$:function(id){
        return this.idToUnitView[id];
    },
    showFuture:function(unitId){
        var unitView=this.unit$(unitId);
        var futureList=unitView.unitModel.futureList;
        var lineWidth=this.gameLayer.cellSize().width/10;
        var pre=false;
        for(var i=0,l=futureList.length;i<l;i++){
            var point=futureList[i].position;
            console.log(point);
            if(_.isObject(point)){
                var pos=this.gameLayer.pCenter(point.i,point.j);
                if(pre){
                    this.futureNode.drawSegment(cc.p(pre.x,pre.y),cc.p(pos.x,pos.y),lineWidth,this.FUTURE_COLOR);
                }else{
                    this.futureNode.drawDot(cc.p(pos.x,pos.y),lineWidth/2,this.FUTURE_COLOR);
                }
                pre=pos;
            }else{
                break;
            }
        }
    },
    showRange:function(unitId){
        var unitView=this.unit$(unitId);
        var unitModel=unitView.unitModel;
        var range=unitModel.battleAttr.range;
        var rangePoints=gPoint.radioRange(unitModel.position,range);
        var radio=this.gameLayer.cellSize().width/4;
        _.each(rangePoints,function(point){
            var xyPos=this.gameLayer.pCenter(point.i,point.j);
            this.rangeNode.drawDot(cc.p(xyPos.x,xyPos.y),radio,this.RANGE_COLOR);
        },this);
    },
    hideRange:function(){
        this.rangeNode.clear();
    }
});
gameView.UnitView = cc.Node.extend({
    LEVEL_SPRITE:1,
    LEVEL_ATTR:2,


    unitModel:null,
    gameLayer:null,

    sprite:"cc.Sprite",
    hpLine:"gameView.HpLine",
    role:"cc.Sprite",
    attrNode:"gameView.AttrNode",

    ctor:function(unitModel,gameLayer){
        this._super();
        this.unitModel=unitModel;
        this.gameLayer=gameLayer;
        // sprite
        var png=spriteRes[this.unitModel.typeName]||res.testpng;
        this.sprite=new cc.Sprite(png);
        this.addChild(this.sprite, this.LEVEL_SPRITE);
        var cellSize=this.gameLayer.cellSize();
        var spriteWidth=cellSize.width*0.9;
        var spriteHeight=cellSize.height*0.9;
        this.sprite.setScaleX(spriteWidth/this.sprite.width);
        this.sprite.setScaleY(spriteHeight/this.sprite.height);


        /* hpLine
        this.hpLine=new gameView.HpLine();
        this.addChild(this.hpLine, this.LEVEL_ATTR);
        var lineScale=spriteWidth/this.hpLine.maxHpLine.width;
        this.hpLine.attr({
            x:0,
            y:spriteHeight/2.2,
            anchorX:0,
            anchorY:0,
        });
        this.hpLine.setScaleX(lineScale);
        this.hpLine.setScaleY(lineScale);*/

        // role
        if(this.unitModel.canOper()){
            this.role=new cc.Sprite(itemRes.blueShell);
        }else{
            this.role=new cc.Sprite(itemRes.blackShell);
        }
        this.addChild(this.role, this.LEVEL_ATTR);
        var roleScale=spriteWidth*0.2/this.role.width;
        this.role.attr({
            x:spriteHeight/2,
            y:spriteHeight/2,
            anchorX:1,
            anchorY:1,
        });
        this.role.setScaleX(roleScale);
        this.role.setScaleY(roleScale);

        // attr
        this.attrNode=new gameView.AttrNode(spriteWidth);
        this.addChild(this.attrNode,this.LEVEL_ATTR);
        this.attrNode.attr({
            x:-spriteHeight/2,
            y:-spriteHeight/2,
            anchorX:0,
            anchorY:0,
        });
    },
    setAttr:function(attrKey,attrValue){
        this.attrNode.setAttr(attrKey,attrValue);
    },
});
gameView.AttrNode = cc.Node.extend({
    hpNode:null,
    apNode:null,
    FONT_COLOR:cc.color(255,255,255),
    ctor:function(width){
        this._super();
        this.hpNode=new cc.LabelTTF("0","Arial",10);
        this.hpNode.setFontFillColor(this.FONT_COLOR);
        this.addChild(this.hpNode,0);
        this.hpNode.setString("2");
        this.hpNode.attr({
            x:width,
            y:0,
            anchorX:1,
            anchorY:0,
        });

        this.apNode=new cc.LabelTTF("0","Arial",10);
        this.apNode.setFontFillColor(this.FONT_COLOR);
        this.addChild(this.apNode,0);
        this.apNode.setString("1");
        this.apNode.attr({
            x:0,
            y:0,
            anchorX:0,
            anchorY:0,
        });
    },
    setAttr:function(attrKey,attrValue){
        var valString=String(attrValue);
        if(attrKey=="ap"){
            this.apNode.setString(valString);
        }else if(attrKey=="hp"){
            this.hpNode.setString(valString);
        }else{
            console.log("set attr exception : no this attr"+attrKey);
        }
    }
});
// ignore...
gameView.HpLine = cc.Node.extend({
    hpLine:null,
    maxHpLine:null,
    ctor:function(){
        this._super();
        this.hpLine=new cc.ProgressTimer(new cc.Sprite(itemRes.hp));
        this.hpLine.setType(cc.ProgressTimer.TYPE_BAR);
        this.hpLine.setMidpoint(cc.p(0,0.5));
        this.hpLine.setBarChangeRate(cc.p(1,0));
        this.hpLine.setPercentage(50);
        this.addChild(this.hpLine,2);
        this.maxHpLine=new cc.ProgressTimer(new cc.Sprite(itemRes.maxHp));
        this.maxHpLine.setType(cc.ProgressTimer.TYPE_BAR);
        this.maxHpLine.setMidpoint(cc.p(0,0.5));
        this.maxHpLine.setBarChangeRate(cc.p(1,0));
        this.maxHpLine.setPercentage(100);
        this.addChild(this.maxHpLine,1);
    },
    setHp:function(hp){
        this.hpLine.setPercentage(hp*10);
    },
    setMaxHp:function(maxHp){
        this.maxHpLine.setPercentage(maxHp*10);
    }
});
var gameView=gameView||{};
gameView.UserInputCtrl=cc.Node.extend({
    STATE_EMPTY:0,
    STATE_POINT:1,

    state:0,

    pointDraw:"drawNode",

    viewManager:null,
    modelManager:null,
    controlModule:null,

    pathingType:null,

    preArea:null,
    selectId:"int",
    doPoint:function(i,j){
        this.preArea={
            i:i,
            j:j
        }
        var gameLayer=this.gameLayer;
        this.pointDraw.clear();
	    this.pointDraw.drawRect(gameLayer.pLeftBottom(i,j),gameLayer.pRightTop(i,j),cc.color(0,0,0,0),2,cc.color(0,0,255));
    },
    unPoint:function(){
        this.pointDraw.clear();
    },

    ctor:function(gameLayer,gameTop){
        this._super();

        this.gameLayer=gameLayer;

	    this.viewManager=gameTop.getModule("viewModule");
	    this.modelManager=gameTop.getModule("modelModule");
	    this.controlModule=gameTop.getModule("controlModule");

        this.pointDraw=new cc.DrawNode();
        this.addChild(this.pointDraw,1);


        this.selectId=false;

        var user=this;
	    var listener=cc.EventListener.create({
		    event:cc.EventListener.TOUCH_ONE_BY_ONE,
	        swallowTouches: true,
		    onTouchBegan:function(touch,event){
			    var ij=gameLayer.p2ij(touch.getLocation());
                return user.beginArea(ij.i,ij.j);
		    },
		    onTouchMoved:function(touch,event){
			    var ij=gameLayer.p2ij(touch.getLocation());
			    user.moveArea(ij.i,ij.j);
		    },
		    onTouchEnded:function(touch,event){
			    var ij=gameLayer.p2ij(touch.getLocation());
			    user.endArea(ij.i,ij.j);
		    }
	    });

	    cc.eventManager.addListener(listener,this);
    },
    beginArea:function(i,j){
        var gameLayer=this.gameLayer;
        if(gameLayer.valid(i,j)){
            this.doPoint(i,j);
            var unitModel=this.modelManager.unit$(i,j);
            if(_.isObject(unitModel)){
                if(unitModel.canOper()){
                    unitModel.doBegin(i,j);
                    this.selectId=unitModel.unitId;
                }else{
                    //this.gameLayer.unitNode.showRange(unitModel.unitId);
                }
            }
            return true;
        }else{
            return false;
        }
    },
    moveArea:function(i,j){
        var gameLayer=this.gameLayer;
        if(gameLayer.valid(i,j)){
            if(this.preArea.i==i && this.preArea.j==j){
                return ;
            }else{
                var areas=this.fill(this.preArea,{i:i,j:j});
                this.doPoint(i,j);
                _.each(areas,function(area){
                    if(_.isNumber(this.selectId)){
                        var unitModel=this.modelManager.unit$(this.selectId);
                        if(unitModel){
                            var success=unitModel.doMove(area.i,area.j);
                            if(!success){
                                this.cancel();
                            }
                        }
                    }
                },this);
            }
        }else{
            this.cancel();
            return ;
        }
    },
    endArea:function(i,j){
        if(_.isNumber(this.selectId)){
            var unitModel=this.modelManager.unit$(this.selectId);
            if(unitModel){
                // todo
                unitModel.doEnd(i,j);
            }
        }
        this.cancel();
    },
    movePos:function(x,y){
    },
    cancel:function(){
        this.selectId=false;
        this.unPoint();
        this.gameLayer.unitNode.hideRange();
    },

    //if the path isnot continuous, fill with some area;
    fill:function(srcArea,dstArea){
        var di=dstArea.i-srcArea.i;
        var dj=dstArea.j-srcArea.j;
        var signi=(di>0?1:-1);
        var signj=(dj>0?1:-1);
        var onAreas=[];
        while(di!=0||dj!=0){
            if(signi*di>signj*dj){
                di-=signi;
            }else{
                dj-=signj;
            }
            onAreas.push({i:dstArea.i-di,
                         j:dstArea.j-dj});
        }
        return onAreas;
    }
});
var gameView=gameView||{};
gameView.AnimateNode = cc.Node.extend({
    gameLayer:"GameLayer",
    drawList:"list",
    unitNode:"UnitViewPool",
    oneDraw:"cc.DrawNode",
    ctor:function(gameLayer,gameTop){
        this._super();
        this.gameLayer=gameLayer;

        this.unitNode=this.gameLayer.unitNode;
        this.oneDraw=new cc.DrawNode();
        this.addChild(this.oneDraw,1);
    },
    actionUnitAttack:function(srcUnitId,dstUnitIdSet){
        var srcView=this.unitNode.unit$(srcUnitId);
        var dstViewSet=_.map(dstUnitIdSet,this.unitNode.unit$,this.unitNode);
        var srcPoint=cc.p(srcView.x,srcView.y);
        _.each(dstViewSet,function(dstView){
            var dstPoint=cc.p(dstView.x,dstView.y);
            this.oneDraw.drawSegment(srcPoint,dstPoint,3,cc.color(255,255,255));
        },this);
        var oneDraw=this.oneDraw;
        this.oneDraw.runAction(cc.sequence(
            cc.fadeOut(0.3),
            cc.callFunc(function(){
                oneDraw.clear(),
                oneDraw.attr({
                    opacity:255
                })
            })
        ));
    },
});
var gameView=gameView||{};
gameView.BulletView =cc.Sprite.extend({
    BULLET_FILE:"bullet",
    gameLayer:null,
    ctor:function(gameLayer){
        var png=spriteRes[this.BULLET_FILE]||res.testpng;
        this._super(png);
        this.gameLayer=gameLayer;
        var cellSize=gameLayer.cellSize();
        var spriteWidth=cellSize.width*0.3;
        var spriteHeight=cellSize.height*0.3;
        this.attr({
            scaleY:spriteWidth/this.width,
            scaleX:spriteHeight/this.height,
            anchorX:0.5,
            anchorY:0.5,
        });
    }
});
gameView.BulletViewPool = cc.Node.extend({
    gameLayer:"GameLayer",
    idToBulletView:"dict",
    ctor:function(gameLayer,gameTop){
        this._super();
        this.gameLayer=gameLayer;

        this.idToBulletView={};
    },
    shotBulletView:function(bullet){
        var bulletView=new gameView.BulletView(this.gameLayer);
        this.addChild(bulletView,0);

        // set position
        var ijFloat=bullet.position.getFloatIJ();
        var xy=this.gameLayer.pLeftBottom(ijFloat.i,ijFloat.j);
        bulletView.attr({
            x:xy.x,
            y:xy.y,
        });

        // get destination
        var ijFloatDst=bullet.getDestination().getFloatIJ();
        var dst=this.gameLayer.pLeftBottom(ijFloatDst.i,ijFloatDst.j);

        // run move action
        bulletView.runAction(cc.moveTo(bullet.durationLimit*gameConst.LOGIC_DURATION,cc.p(dst.x,dst.y)));
        this.idToBulletView[bullet.bulletId]=bulletView;
        return this.bulletView;
    },
    deleteBullet:function(bulletId){
        var bulletView=this.idToBulletView[bulletId];
        bulletView.removeFromParent();
    },
    explodeBullet:function(bulletId){
        // run explode action..
        var bulletView=this.idToBulletView[bulletId];
        bulletView.runAction(cc.sequence(
            cc.scaleTo(0.1,2*bulletView.getScaleX(),2*bulletView.getScaleY()),
            cc.callFunc(function(){
                bulletView.removeFromParent();
            })
        ));
    }
});
var gameModel=gameModel||{};
gameModel.Position=gUtil.Class.extend({
    i:"int",
    j:"int",
    x:"int",
    y:"int",
    battleModel:"BattleModel",
    constructor:function(battleModel,i,j){
        this.battleModel=battleModel;
        this.i=i;
        this.j=j;
        var xy=battleModel.pCenter(i,j);
        this.x=xy.x;
        this.y=xy.y;
    },
    stand:function(){
        var xy=this.battleModel.pCenter(this.i,this.j);
        this.x=xy.x;
        this.y=xy.y;
    },
    //
    getFloatIJ:function(){
        return this.battleModel.xy2ijFloat(this.x,this.y);
    },
    // calculate
    xPlus:function(dx){
        this.x+=dx;
        var iUpdate=Math.floor(this.x/this.battleModel.CELL_SIZE);
        if(this.i!=iUpdate){
            this.i=iUpdate;
            return true;
        }else{
            return false;
        }
    },
    xMinus:function(dx){
        return this.xPlus(-dx);
    },
    yPlus:function(dy){
        this.y+=dy;
        var jUpdate=Math.floor(this.y/this.battleModel.CELL_SIZE);
        if(this.j!=jUpdate){
            this.j=jUpdate;
            return true;
        }else{
            return false;
        }
    },
    yMinus:function(dy){
        return this.yPlus(-dy);
    },
    xMoveTo:function(x,speed){
        var dx=x-this.x;
        if(dx>speed){
            return this.xPlus(speed);
        }else if(dx<-speed){
            return this.xMinus(speed);
        }else{
            return this.xPlus(dx);
        }
    },
    yMoveTo:function(y,speed){
        var dy=y-this.y;
        if(dy>speed){
            return this.yPlus(speed);
        }else if(dy<-speed){
            return this.yMinus(speed);
        }else{
            return this.yPlus(dy);
        }
    },
    clone:function(){
        var clonePos=new gameModel.Position(this.battleModel,this.i,this.j);
        clonePos.x=this.x;
        clonePos.y=this.y;
        return clonePos;
    },
});
var gameModel=gameModel||{};
gameModel.BattleModel=gUtil.Class.extend({
    mazeModel:"MazeModel",
    bulletPool:"BulletPool",
    idToUnit:"dict",
    timeSum:0,
    modelManager:null,
    viewManager:null,
    iLength:"int",
    jLength:"int",
    CELL_SIZE:210,
    idCounter:0,
    constructor:function(gameTop){
  	    gameModel.BattleModel.__super__.constructor.call(this);

        this.modelManager=gameTop.getModule("modelModule");
        this.viewManager=gameTop.getModule("viewModule");

        this.iLength=this.modelManager.iLength;
        this.jLength=this.modelManager.jLength;

        this.mazeModel=new gameModel.MazeModel(this);
        this.bulletPool=new gameModel.BulletPool(this,gameTop);
        this.idToUnit={};
    },
    timeUpdate:function(dt){
        this.timeSum+=dt;
        if(this.timeSum>gameConst.LOGIC_DURATION){
            this.timeSum-=gameConst.LOGIC_DURATION;

            _.each(this.idToUnit,function(unit,unitId){
                if(_.isObject(unit)){
                    unit.stepUpdate();
                }
            });
            this.bulletPool.stepUpdate();
        }
    },
    ///////////////////
    // init operate  //
    ///////////////////
    createUnit:function(typeName,i,j){
        var position=this.createPosition(i,j);
        var modelClass=gameModel.unitModelDict[typeName]||gameModel.UnitModel;
        var unit=new modelClass(this,this.idCounter,position);
        this.idCounter=this.idCounter+1;

        // put in maze & dict;
        this.idToUnit[unit.unitId]=unit;
        this.mazeModel.addUnit(unit);
        return unit;
    },
    ///////////////////
    // unit operate  //
    ///////////////////
    unitShowMove:function(unit,dstPos){
        var duration=gameConst.LOGIC_DURATION*xyPoint.maDistance(unit.getPosition(),dstPos)/unit.getSpeed();
        this.viewManager.showUnitMove(unit.unitId,dstPos,duration);
    },
    unitShowAttack:function(srcUnit,dstUnitArray){
        var dstUnitIdSet=_.map(dstUnitArray,function(unit){
            return unit.unitId;
        });
        this.viewManager.showUnitAttack(srcUnit.unitId,dstUnitIdSet);
    },
    unitShowSetAttr:function(unit,attrKey,attrValue){
        this.viewManager.showUnitAttrUpdate(unit.unitId,attrKey,attrValue);
    },
    unitShowShotBullet:function(unit,bullet){
        this.viewManager.getBulletViewPool().shotBulletView(bullet);
    },
    unitUpdatePos:function(unit){
        this.mazeModel.updateUnit(unit);
    },
    unitDead:function(unit){
        this.mazeModel.removeUnit(unit);
        delete this.idToUnit[unit.unitId];
        this.viewManager.showUnitDelete(unit.unitId);
    },
    /////////////////
    // unit getter //
    /////////////////
    unit$:function(){
        if(arguments.length==1){
            var unitId=arguments[0];
            return this.idToUnit[unitId]||false;
        }else if(arguments.length==2){
            var i=arguments[0];
            var j=arguments[1];
            return this.mazeModel.getUnit(i,j);
        }else if(arguments.length==0){
            return _.toArray(this.idToUnit);
        }
    },

    ///////////////////
    // position util //
    ///////////////////
    xy2xy:function(x,y){
        var cellSize=this.CELL_SIZE;
        var i=Math.floor(x/cellSize);
        var j=Math.floor(y/cellSize);
        return this.pCenter(i,j);
    },
    xy2ij:function(x,y){
        var cellSize=this.CELL_SIZE;
        return {
            i:Math.floor(x/cellSize),
            j:Math.floor(y/cellSize)
        };
    },
    xy2ijFloat:function(x,y){
        var cellSize=this.CELL_SIZE;
        return {
            i:x/cellSize,
            j:y/cellSize
        };
    },
    pLeftBottom:function(i,j){
        var cellSize=this.CELL_SIZE;
        return {
            x:i*cellSize,
            y:j*cellSize
        };
    },
    pCenter:function(i,j){
	    var base=this.pLeftBottom(i,j);
        var cellSize=this.CELL_SIZE;
	    return {
            x:base.x+cellSize/2,
            y:base.y+cellSize/2
        };
    },
    createPosition:function(i,j){
        var position=new gameModel.Position(this,i,j);
        return position;
    },
    ////////////
    // getter //
    ////////////
    getMazeModel:function(){
        return this.mazeModel;
    },
    getBulletPool:function(){
        return this.bulletPool;
    },
    valid:function(i,j){
        return this.mazeModel.valid(i,j);
    },
});
var gameModel=gameModel||{};
gameModel.UnitIndex=gUtil.Class.extend({
    i:"int",
    j:"int",
    unitId:"int",
    constructor:function(unit){
        this.unitId=unit.unitId;
        this.i=unit.position.i;
        this.j=unit.position.j;
    }
});
gameModel.MazeModel=gUtil.Class.extend({
    iLength:"int",
    jLength:"int",
    ijToIndex:"array",
    unitIdToIndex:"dict",
    battleModel:"BattleModel",
    constructor:function(battleModel){
        this.battleModel=battleModel;

        this.iLength=battleModel.iLength;
        this.jLength=battleModel.jLength;

        this.ijToIndex=new Array(this.iLength);
        for(var i=0,l=this.iLength;i<l;i++){
            this.ijToIndex[i]=new Array(this.jLength);
        }
        this.unitIdToIndex={};
    },
    addUnit:function(unit){
        var index=new gameModel.UnitIndex(unit);
        this.ijToIndex[index.i][index.j]=index;
        this.unitIdToIndex[index.unitId]=index;
    },
    updateUnit:function(unit){
        var index=this.unitIdToIndex[unit.unitId];
        this.ijToIndex[index.i][index.j]=undefined;

        index.i=unit.getPosition().i;
        index.j=unit.getPosition().j;
        this.ijToIndex[index.i][index.j]=index;
    },
    removeUnit:function(unit){
        var index=this.unitIdToIndex[unit.unitId];
        this.ijToIndex[index.i][index.j]=undefined;
        this.unitIdToIndex[index.unitId]=undefined;
    },
    getUnit:function(i,j){
        if(!this.valid(i,j)){
            return false;
        }
        var index=this.ijToIndex[i][j];
        if(_.isObject(index)){
            return this.battleModel.unit$(index.unitId);
        }else{
            return false;
        }
    },
    valid:function(i,j){
        if(i<0 || i>=this.iLength){
            return false;
        }else if(j<0 || j>=this.jLength){
            return false;
        }else{
            return true;
        }
    }
});
var gameModel=gameModel||{};
gameModel.BulletModel=gUtil.Class.extend({
    speed:20,
    EXPLODE_DISTANCE:100,

    bulletId:"int",
    position:"Position",
    vx:"float",
    vy:"float",
    damage:"int",
    distanceLimit:"int",
    durationLimit:"int",
    duration:"int",
    sourceId:"unit",
    constructor:function(bulletPool,bulletId,source,target){
        this.bulletPool=bulletPool;
        this.bulletId=bulletId;
        this.sourceId=source.unitId;
        this.position=source.getPosition().clone();
        var dx=target.position.x-source.position.x;
        var dy=target.position.y-source.position.y;
        var distance=Math.abs(dx)+Math.abs(dy);
        this.vx=(dx/distance)*this.speed;
        this.vy=(dy/distance)*this.speed;
        this.duration=0;
    },
    setDamageDistance:function(damage,distanceLimit){
        this.damage=damage;
        this.durationLimit=Math.floor(distanceLimit/this.speed);
    },
    stepUpdate:function(){
        if(this.duration<this.durationLimit){
            var thisPos=this.position;
            thisPos.xPlus(this.vx);
            thisPos.yPlus(this.vy);
            this.duration++;
            var range=gPoint.radioRange(thisPos,1);
            for(var ri=0,rl=range.length;ri<rl;ri++){
                var point=range[ri];
                var hitUnit=this.bulletPool.battleModel.unit$(point.i,point.j);
                if(_.isObject(hitUnit)){
                    if(hitUnit.unitId==this.sourceId){
                        continue;
                    }else{
                        var dist=xyPoint.maDistance(hitUnit.position,thisPos);
                        if(dist<this.EXPLODE_DISTANCE){
                            hitUnit.onAttack(this.damage);
                            this.bulletPool.bulletExplode(this.bulletId);
                        }
                        break;
                    }
                }
            }
        }else{
            this.bulletPool.bulletDelete(this.bulletId);
        }
    },
    getDestination:function(){
        var dst=this.position.clone();
        var timeLeft=this.durationLimit-this.duration;
        dst.xPlus(this.vx*timeLeft);
        dst.yPlus(this.vy*timeLeft);
        return dst;
    },
});
gameModel.BulletPool=gUtil.Class.extend({
    battleModel:"BattleModel",
    viewManager:"viewModule",
    idToBullet:"dict",
    idCounter:"int",
    constructor:function(battleModel,gameTop){
        this.battleModel=battleModel;
        this.viewManager=gameTop.getModule("viewModule");

        this.idToBullet={};
        this.idCounter=0;
    },
    stepUpdate:function(){
        _.each(this.idToBullet,function(bullet){
            bullet.stepUpdate();
        },this);
    },
    getNewId:function(){
        return this.idCounter++;
    },
    bulletCreate:function(bullet){
        this.idToBullet[bullet.bulletId]=bullet;
        this.viewManager.showBulletCreate(bullet);
    },
    bulletExplode:function(bulletId){
        delete this.idToBullet[bulletId];
        this.viewManager.showBulletExplode(bulletId);
    },
    bulletDelete:function(bulletId){
        delete this.idToBullet[bulletId];
        this.viewManager.showBulletDelete(bulletId);
    }
});
var gameModel=gameModel||{};
gameModel.UnitBattleAttr=gUtil.Class.extend({
    hp:"int",
    ap:"int",
    range:"int",
    constructor:function(dict){
  	    gameModel.UnitBattleAttr.__super__.constructor.apply(this,arguments);
        this.hp=10;
        this.ap=3;
        this.range=1;
        _.extend(this,dict);
    },
    onHarm:function(harm){
        this.hp-=harm
    },
    isDead:function(){
        return this.hp<=0;
    }
});
gameModel.UnitModel=gUtil.Class.extend({
    typeName:"unit",
    speed:100,
    battleModel:"object",
    position:"Position",
    battleAttr:"UnitBattleAttr",
    unitId:"int",

    currentFuture:"futureObject",
    futureList:"list",
    nextFutureIndex:"int",

    constructor:function(battleModel,unitId,position){
  	    gameModel.UnitModel.__super__.constructor.apply(this,arguments);

        this.battleModel=battleModel;
        this.position=position;
        this.unitId=unitId;

        this.battleAttr=new gameModel.UnitBattleAttr();
        this.cleanFuture();
    },

    canOper:function(){
        return false;
    },

    doBegin:function(i,j){
        return false;
    },
    doMove:function(i,j){
        return false;
    },
    doEnd:function(i,j){
        return false;
    },
    doAttack:function(unitId){
        return false;
    },

    cleanFuture:function(){
        this.currentFuture=new gameModel.EmptyFutureModel();
        this.nextFutureIndex=0;
        this.futureList=[];
    },

    stepAI:function(){
    },

    stepUpdate:function(){
        this.stepAI();
        var stepFuture=false;
        var stepStart=false;
        while(true){
            if(_.isObject(this.currentFuture)){
                if(!this.currentFuture.isFinished()){
                    stepFuture=this.currentFuture;
                    break;
                }
            }
            if(this.nextFutureIndex<this.futureList.length){
                this.currentFuture=this.futureList[this.nextFutureIndex];
                this.nextFutureIndex+=1;
                stepStart=true;
            }else{
                this.currentFuture=new gameModel.EmptyFutureModel();
                break;
            }
        }
        if(stepFuture){
            if(stepStart){
                var funcName=this.startHandlers[stepFuture.typeName];
                if(funcName) this[funcName].call(this,stepFuture);
            }else{
                var funcName=this.futureHandlers[stepFuture.typeName];
                if(funcName) this[funcName].call(this,stepFuture);
                else console.error("future unhandle");
                if(stepFuture.isFinished()){
                    var startFuture=false;
                    while(true){
                        if(this.nextFutureIndex<this.futureList.length){
                            this.currentFuture=this.futureList[this.nextFutureIndex];
                            this.nextFutureIndex+=1;
                        }else{
                            this.currentFuture=new gameModel.EmptyFutureModel();
                            break;
                        }
                        if(this.currentFuture.isFinished()){
                            continue;
                        }else{
                            startFuture=this.currentFuture;
                            break;
                        }
                    }
                    if(startFuture){
                        var funcName=this.startHandlers[startFuture.typeName];
                        if(funcName) this[funcName].call(this,startFuture);
                    }
                }
            }
        }else{
            // for empty future
        }
    },

    canMove:function(moveFuture){
        var futurePos=moveFuture.position;
        var thisPos=this.position;
        var di=Math.abs(futurePos.i-thisPos.i);
        var dj=Math.abs(futurePos.j-thisPos.j);
        var continuous=(di==1&&dj==0)||(di==0&&dj==1)||(di==0&&dj==0);
        if(!continuous){
            return false;
        }else{
            var checkUnit=this.battleModel.unit$(futurePos.i,futurePos.j);
            if(_.isObject(checkUnit)){
                if(checkUnit.unitId!=this.unitId){
                    return false;
                }
            }
        }
        return true;
    },

    startHandlers:{
        "moveFuture":"startMove",
        "standFuture":"startStand",
        "attackFuture":"startAttack",
    },
    startMove:function(moveFuture){
        if(!this.canMove(moveFuture)){
            moveFuture.stop();
            this.cleanFuture();
        }else{
            this.battleModel.unitShowMove(this,moveFuture.position);
        }
    },
    startStand:function(standFuture){
        this.battleModel.unitShowMove(this,standFuture.position);
    },
    startAttack:function(attackFuture){
        var dstUnit=this.battleModel.unit$(attackFuture.dstId);
        if(_.isObject(dstUnit)){
            this.battleModel.unitShowAttack(this,[dstUnit]);
        }
    },
    futureHandlers:{
        "moveFuture":"stepMove",
        "attackFuture":"stepAttack",
        "standFuture":"stepStand",
        "emptyFuture":"stepEmpty",
    },
    stepMove:function(moveFuture){
        var thisPos=this.position;
        var futurePos=moveFuture.position;
        if(!this.canMove(moveFuture)){
            this.cleanFuture();
            return ;
        }else{
            // i or j in the same line
            var dx=futurePos.x-thisPos.x;
            var dy=futurePos.y-thisPos.y;
            var update=false;
            if(dx==0&&dy!=0){
                update=thisPos.yMoveTo(futurePos.y,this.speed);
            }else if(dy==0&&dx!=0){
                update=thisPos.xMoveTo(futurePos.x,this.speed);
            }else if(dx!=0&&dy!=0){
                // xy not in the same line
                thisPos.stand();
            }else{
                console.log("unit position exception when move step");
            }
            if(update){
                this.battleModel.unitUpdatePos(this);
            }
            if(moveFuture.isFinished()){
                var nextFuture=this.futureList[this.nextFutureIndex];
                if(_.isObject(nextFuture)){
                    if(nextFuture.typeName=="moveFuture"){
                        var nextPos=nextFuture.position;
                        if(thisPos.x!=nextPos.x && thisPos.y!=nextPos.y){
                            thisPos.stand();
                        }
                    }
                }
            }
        }
    },
    stepAttack:function(attackFuture){
        var dstUnit=this.battleModel.unit$(attackFuture.dstId);
        if(_.isObject(dstUnit)){
            var delay=attackFuture.stepCount();
            if(delay<=0){
                var harm=this.createAttack();
                dstUnit.onAttack(harm);
            }else{
                return ;
            }
        }else{
            return ;
        }
    },
    stepStand:function(standFuture){
        var thisPos=this.position;
        var standPos=standFuture.position;
        var dist=xyPoint.maDistance(standPos,thisPos);
        if(dist<this.speed){
            thisPos.stand();
        }else{
            this.stepMove(new gameModel.MoveFutureModel(standPos).bind(this));
        }
    },
    stepEmpty:function(emptyFuture){
    },

    getSpeed:function(){
        return this.speed;
    },
    getPosition:function(){
        return this.position;
    },

    createAttack:function(){
        return this.battleAttr.ap;
    },
    onAttack:function(ap){
        var battleAttr=this.battleAttr;
        battleAttr.onHarm(ap);
        this.battleModel.unitShowSetAttr(this,"hp",battleAttr.hp);
        if(battleAttr.isDead()){
            this.battleModel.unitDead(this);
        }
    },
    getAttr:function(key){
        if(key){
            return this.battleAttr[key];
        }else{
            return this.battleAttr;
        }
    }

});
gameModel.unitModelDict={}
gameModel.unitExtend=function(baseClass,props,staticProps){
    if(props.typeName){
        /*
        var num=gScript.getNumericalDict(props.typeName);
        if(num){
            // extend hp, ap, range, group
            _.extend(props,num);
            // set max hp as hp
            props.maxHp=num.hp;
        }*/
        var aUnitClass=baseClass.extend(props,staticProps);
        gameModel.unitModelDict[props.typeName]=aUnitClass;
    }else{
        var aUnitClass=baseClass.extend(props,staticProps);
        console.warn("unit class defined without typeName");
    }
    return aUnitClass;
}

gameModel.unitImpl=function(props,staticProps){
    return gameModel.unitExtend(gameModel.UnitModel,props,staticProps);
}
gameModel.attackerImpl=function(props,staticProps){
    return gameModel.unitExtend(gameModel.AttackerModel,props,staticProps);
}
gameModel.defenserImpl=function(props,staticProps){
    return gameModel.unitExtend(gameModel.DefenserModel,props,staticProps);
}
gameModel.runnerImpl=function(props,staticProps){
    return gameModel.unitExtend(gameModel.RunnerModel,props,staticProps);
}
var gameModel=gameModel||{};
gameModel.AttackerModel=gameModel.unitImpl({
    typeName:"attacker",
    speed:100,

    constructor:function(battleModel,unitId,position){
  	    gameModel.AttackerModel.__super__.constructor.apply(this,arguments);
    },

    canOper:function(){
        return true;
    },
    getLastPosition:function(){
        for(var i=this.futureList.length-1;i>=this.nextFutureIndex;i--){
            var future=this.futureList[i];
            if(future.typeName=="moveFuture"){
                return future.position;
            }
        }
        if(_.isObject(this.currentFuture)){
            if(this.currentFuture.typeName=="moveFuture"){
                return this.currentFuture.position;
            }
        }
        return this.position;
    },
    doMove:function(i,j){
        var lastPos=this.getLastPosition();
        var dist=gPoint.maDistance(lastPos,{
            i:i,
            j:j
        });
        if(dist>1){
            return false;
        }else if(dist==0){
            return true;
        }
        var dstUnit=this.battleModel.unit$(i,j);
        var dstPos=this.battleModel.createPosition(i,j);
        if(_.isObject(dstUnit)){
            if(dstUnit.unitId!=this.unitId){
                var attackFuture=new gameModel.AttackFutureModel(dstPos,dstUnit.unitId).bind(this);
                this.futureList.push(attackFuture);
                return true;
            }
        }
        this.futureList.push(new gameModel.MoveFutureModel(dstPos).bind(this));
        return true;
    },
    doBegin:function(i,j){
        var standPos=this.battleModel.createPosition(i,j);
        var thisPos=this.position;
        if(standPos.i==thisPos.i && standPos.j==thisPos.j){
            this.cleanFuture();
            this.futureList.push(new gameModel.StandFutureModel(standPos).bind(this));
        }else{
            return false;
        }
    },
    doEnd:function(i,j){
        return false;
    }

});
gameModel.HitterModel=gameModel.attackerImpl({
    typeName:"hitter",
});
// not a good type...
gameModel.FlierModel=gameModel.attackerImpl({
    typeName:"flier",
    speed:209,
    doBegin:function(i,j){
        return true;
    },
    doMove:function(i,j){
        return true;
    },
    doEnd:function(i,j){
        var dstPos=this.battleModel.createPosition(i,j);
        this.futureList.push(new gameModel.MoveFutureModel(dstPos).bind(this));
        return true;
    },

    canMove:function(moveFuture){
        var dstPos=moveFuture.position;
        var unit=this.battleModel.unit$(dstPos.i,dstPos.j);
        if(_.isObject(unit)){
            return false;
        }else{
            return true;
        }
    },
    startMove:function(moveFuture){
        if(this.canMove(moveFuture)){
            this.battleModel.unitShowMove(this,moveFuture.position);
        }else{
            moveFuture.stop();
            this.cleanFuture();
        }
    },
    stepMove:function(moveFuture){
        var dstPos=moveFuture.position;
        if(this.canMove(moveFuture)){
            this.position=moveFuture.position;
            this.battleModel.unitUpdatePos(this);
        }else{
            this.cleanFuture();
        }
    }
});
var gameModel=gameModel||{};
gameModel.DefenserModel=gameModel.unitImpl({
    typeName:"defenser",
    speed:100,

    constructor:function(battleModel,unitId,position){
  	    gameModel.DefenserModel.__super__.constructor.apply(this,arguments);
    },

    canOper:function(){
        return false;
    },
    doBegin:function(i,j){
        return false;
    },
    doMove:function(i,j){
        return false;
    },
    doEnd:function(i,j){
        return false;
    },
    doAttack:function(unitId){
        return false;
    },

    stepAI:function(){
    },


});
gameModel.SlowGunModel=gameModel.defenserImpl({
    typeName:"slowGun",
    COOL_DOWN:10,
    DISTANCE_LIMIT:1050,
    coolingTime:0,
    bulletPool:"bulletPool",
    constructor:function(battleModel,unitId,position){
  	    gameModel.DefenserModel.__super__.constructor.apply(this,arguments);
        this.coolingTime=0;
        this.battleAttr=new gameModel.UnitBattleAttr({
            range:3,
        });
        this.bulletPool=battleModel.bulletPool;
    },
    shotBullet:function(){
        var range=gPoint.radioRange(this.position,this.getAttr("range"));
        for(var i=0,l=range.length;i<l;i++){
            var point=range[i];
            var unit=this.battleModel.unit$(point.i,point.j);
            if(_.isObject(unit)){
                if(unit.unitId!=this.unitId){
                    var bullet=this.createBullet(unit);
                    this.bulletPool.bulletCreate(bullet);
                    this.coolingTime=this.COOL_DOWN;
                    break;
                }
            }
        }
    },
    stepAI:function(){
        if(this.coolingTime<=0){
            this.shotBullet();
        }else{
            this.coolingTime--;
        }
    },
    createBullet:function(target){
        var bulletPool=this.bulletPool;
        var bullet=new gameModel.BulletModel(bulletPool,bulletPool.getNewId(),this,target);
        bullet.setDamageDistance(this.battleAttr.ap,this.DISTANCE_LIMIT);
        return bullet;
    }
});

gameModel.LauncherModel=gameModel.unitImpl({
    typeName:"launcher",
    speed:100,

    constructor:function(battleModel,unitId,position){
  	    gameModel.LauncherModel.__super__.constructor.apply(this,arguments);
    },

    canOper:function(){
        return false;
    },
    stepAI:function(){
    },
    createUnit:function(dstPos){
        var unit=this.battleModel.unit$(dstPos.i,dstPos.j);
        if(_.isOjbect(unit)){
            return false;
        }else{
            var unit=this.battleModel.createUnit("runner",dstPos.i,dstPos.j)
            return unit;
        }
    }

});var gameModel=gameModel||{};
gameModel.BaseFutureModel=gUtil.Class.extend({
    typeName:"baseAction",
    unitModel:"UnitModel",
    stopFlag:"bool",
    constructor:function(){
  	    gameModel.BaseFutureModel.__super__.constructor.call(this);
        this.stopFlag=false;
    },
    bind:function(unit){
        this.unitModel=unit;
        return this;
    },
    isFinished:function(){
        return true;
    },
    stop:function(){
        this.stopFlag=true;
    }
});
gameModel.EmptyFutureModel=gameModel.BaseFutureModel.extend({
    typeName:"emptyFuture",
});
gameModel.MoveFutureModel=gameModel.BaseFutureModel.extend({
    typeName:"moveFuture",
    position:"Position",
    constructor:function(position){
  	    gameModel.MoveFutureModel.__super__.constructor.call(this);
        this.position=position;
    },
    isFinished:function(){
        if(this.stopFlag){
            return true;
        }else{
            var distance=xyPoint.maDistance(this.position,this.unitModel.position);
            if(distance<this.unitModel.getSpeed()){
                return true;
            }else{
                return false;
            }
        }
    }
});
gameModel.StandFutureModel=gameModel.BaseFutureModel.extend({
    typeName:"standFuture",
    position:"Position",
    constructor:function(position){
  	    gameModel.StandFutureModel.__super__.constructor.call(this);
        this.position=position;
    },
    isFinished:function(){
        var distance=xyPoint.maDistance(this.position,this.unitModel.position);
        if(distance==0){
            return true;
        }else{
            return false;
        }
    }
});
gameModel.AttackFutureModel=gameModel.BaseFutureModel.extend({
    typeName:"attackFuture",
    dstId:"int",
    delay:"int",
    constructor:function(position,dstId,delay){
        this.position=position;
        this.dstId=dstId;
        this.delay=delay||1;
    },
    stepCount:function(){
        this.delay-=1;
        return this.delay;
    },
    isFinished:function(){
        if(this.delay<=0){
            return true;
        }else{
            return false;
        }
    }
});

// pack finger's operation not used, not finished
gameModel.OperateFuture=gUtil.Class.extend({
    futureList:"list",
    currentIndex:"int",
    unitModel:"UnitModel",
    constructor:function(unitModel){
        this.futureList=[];
        this.currentIndex=0;
        this.unitModel=unitModel;
    },
    doStart:function(i,j){
        var standPos=this.battleModel.createPosition(i,j);
        var unitPos=this.unitModel.position;
        if(standPos.i==unitPos.i && standPos.j==unitPos.j){
            this.clear();
            this.futureList.push(standPos);
        }else{
            return false;
        }
    },
    doMove:function(i,j){
        var movePos=this.battleModel.createPosition(i,j);
        this.futureList.push(movePos);
        return true;
    },
    doAttack:function(){
        //TODO
    },
    doFinish:function(){
        //TODO
    },
    clear:function(){
        this.futureList=[];
        this.currentIndex=0;
    },
    getCurrentFuture:function(){
    },
});
